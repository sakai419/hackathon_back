// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: hashtags.sql

package sqlcgen

import (
	"context"

	"github.com/lib/pq"
)

const getHashtagIDs = `-- name: GetHashtagIDs :many
WITH new_hashtags AS (
    INSERT INTO hashtags (tag)
    SELECT UNNEST($1::VARCHAR(30)[])
    ON CONFLICT (tag) DO NOTHING
    RETURNING id, tag
)
SELECT id FROM new_hashtags
UNION
SELECT id FROM hashtags WHERE tag = ANY($1::VARCHAR(30)[])
ORDER BY id
`

func (q *Queries) GetHashtagIDs(ctx context.Context, tags []string) ([]int64, error) {
	rows, err := q.db.QueryContext(ctx, getHashtagIDs, pq.Array(tags))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var id int64
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: notifications.sql

package sqlcgen

import (
	"context"
	"database/sql"
	"time"
)

const createNotification = `-- name: CreateNotification :exec
INSERT INTO notifications (sender_account_id, recipient_account_id, type, content)
VALUES ($1, $2, $3, $4)
`

type CreateNotificationParams struct {
	SenderAccountID    sql.NullString
	RecipientAccountID string
	Type               NotificationType
	Content            sql.NullString
}

func (q *Queries) CreateNotification(ctx context.Context, arg CreateNotificationParams) error {
	_, err := q.db.ExecContext(ctx, createNotification,
		arg.SenderAccountID,
		arg.RecipientAccountID,
		arg.Type,
		arg.Content,
	)
	return err
}

const deleteAllNotificationsForRecipient = `-- name: DeleteAllNotificationsForRecipient :exec
DELETE FROM notifications
WHERE recipient_account_id = $1
`

func (q *Queries) DeleteAllNotificationsForRecipient(ctx context.Context, recipientAccountID string) error {
	_, err := q.db.ExecContext(ctx, deleteAllNotificationsForRecipient, recipientAccountID)
	return err
}

const deleteNotification = `-- name: DeleteNotification :exec
DELETE FROM notifications
WHERE id = $1 AND recipient_account_id = $2
`

type DeleteNotificationParams struct {
	ID                 int64
	RecipientAccountID string
}

func (q *Queries) DeleteNotification(ctx context.Context, arg DeleteNotificationParams) error {
	_, err := q.db.ExecContext(ctx, deleteNotification, arg.ID, arg.RecipientAccountID)
	return err
}

const deleteOldReadNotifications = `-- name: DeleteOldReadNotifications :exec
DELETE FROM notifications
WHERE recipient_account_id = $1 AND is_read = TRUE AND created_at < $2
`

type DeleteOldReadNotificationsParams struct {
	RecipientAccountID string
	CreatedAt          time.Time
}

func (q *Queries) DeleteOldReadNotifications(ctx context.Context, arg DeleteOldReadNotificationsParams) error {
	_, err := q.db.ExecContext(ctx, deleteOldReadNotifications, arg.RecipientAccountID, arg.CreatedAt)
	return err
}

const getNotificationByID = `-- name: GetNotificationByID :one
SELECT id, sender_account_id, recipient_account_id, type, content, is_read, created_at FROM notifications
WHERE id = $1
`

func (q *Queries) GetNotificationByID(ctx context.Context, id int64) (Notification, error) {
	row := q.db.QueryRowContext(ctx, getNotificationByID, id)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.SenderAccountID,
		&i.RecipientAccountID,
		&i.Type,
		&i.Content,
		&i.IsRead,
		&i.CreatedAt,
	)
	return i, err
}

const getNotificationCountByRecipientID = `-- name: GetNotificationCountByRecipientID :one
SELECT COUNT(*) FROM notifications
WHERE recipient_account_id = $1
`

func (q *Queries) GetNotificationCountByRecipientID(ctx context.Context, recipientAccountID string) (int64, error) {
	row := q.db.QueryRowContext(ctx, getNotificationCountByRecipientID, recipientAccountID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getNotificationsByRecipientID = `-- name: GetNotificationsByRecipientID :many
SELECT id, sender_account_id, recipient_account_id, type, content, is_read, created_at FROM notifications
WHERE recipient_account_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type GetNotificationsByRecipientIDParams struct {
	RecipientAccountID string
	Limit              int32
	Offset             int32
}

func (q *Queries) GetNotificationsByRecipientID(ctx context.Context, arg GetNotificationsByRecipientIDParams) ([]Notification, error) {
	rows, err := q.db.QueryContext(ctx, getNotificationsByRecipientID, arg.RecipientAccountID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Notification
	for rows.Next() {
		var i Notification
		if err := rows.Scan(
			&i.ID,
			&i.SenderAccountID,
			&i.RecipientAccountID,
			&i.Type,
			&i.Content,
			&i.IsRead,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNotificationsByType = `-- name: GetNotificationsByType :many
SELECT id, sender_account_id, recipient_account_id, type, content, is_read, created_at FROM notifications
WHERE recipient_account_id = $1 AND type = $2
ORDER BY created_at DESC
LIMIT $3 OFFSET $4
`

type GetNotificationsByTypeParams struct {
	RecipientAccountID string
	Type               NotificationType
	Limit              int32
	Offset             int32
}

func (q *Queries) GetNotificationsByType(ctx context.Context, arg GetNotificationsByTypeParams) ([]Notification, error) {
	rows, err := q.db.QueryContext(ctx, getNotificationsByType,
		arg.RecipientAccountID,
		arg.Type,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Notification
	for rows.Next() {
		var i Notification
		if err := rows.Scan(
			&i.ID,
			&i.SenderAccountID,
			&i.RecipientAccountID,
			&i.Type,
			&i.Content,
			&i.IsRead,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUnreadNotificationCountByRecipientID = `-- name: GetUnreadNotificationCountByRecipientID :one
SELECT COUNT(*) FROM notifications
WHERE recipient_account_id = $1 AND is_read = FALSE
`

func (q *Queries) GetUnreadNotificationCountByRecipientID(ctx context.Context, recipientAccountID string) (int64, error) {
	row := q.db.QueryRowContext(ctx, getUnreadNotificationCountByRecipientID, recipientAccountID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getUnreadNotificationsByRecipientID = `-- name: GetUnreadNotificationsByRecipientID :many
SELECT id, sender_account_id, recipient_account_id, type, content, is_read, created_at FROM notifications
WHERE recipient_account_id = $1 AND is_read = FALSE
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type GetUnreadNotificationsByRecipientIDParams struct {
	RecipientAccountID string
	Limit              int32
	Offset             int32
}

func (q *Queries) GetUnreadNotificationsByRecipientID(ctx context.Context, arg GetUnreadNotificationsByRecipientIDParams) ([]Notification, error) {
	rows, err := q.db.QueryContext(ctx, getUnreadNotificationsByRecipientID, arg.RecipientAccountID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Notification
	for rows.Next() {
		var i Notification
		if err := rows.Scan(
			&i.ID,
			&i.SenderAccountID,
			&i.RecipientAccountID,
			&i.Type,
			&i.Content,
			&i.IsRead,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markAllNotificationsAsRead = `-- name: MarkAllNotificationsAsRead :exec
UPDATE notifications
SET is_read = TRUE
WHERE recipient_account_id = $1 AND is_read = FALSE
`

func (q *Queries) MarkAllNotificationsAsRead(ctx context.Context, recipientAccountID string) error {
	_, err := q.db.ExecContext(ctx, markAllNotificationsAsRead, recipientAccountID)
	return err
}

const markNotificationAsRead = `-- name: MarkNotificationAsRead :exec
UPDATE notifications
SET is_read = TRUE
WHERE id = $1 AND recipient_account_id = $2
`

type MarkNotificationAsReadParams struct {
	ID                 int64
	RecipientAccountID string
}

func (q *Queries) MarkNotificationAsRead(ctx context.Context, arg MarkNotificationAsReadParams) error {
	_, err := q.db.ExecContext(ctx, markNotificationAsRead, arg.ID, arg.RecipientAccountID)
	return err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: profiles.sql

package sqlcgen

import (
	"context"
	"database/sql"
)

const checkProfilesExists = `-- name: CheckProfilesExists :one
SELECT EXISTS(SELECT 1 FROM profiles WHERE account_id = $1)
`

func (q *Queries) CheckProfilesExists(ctx context.Context, accountID string) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkProfilesExists, accountID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createProfilesWithDefaultValues = `-- name: CreateProfilesWithDefaultValues :exec
INSERT INTO profiles (account_id)
VALUES ($1)
`

func (q *Queries) CreateProfilesWithDefaultValues(ctx context.Context, accountID string) error {
	_, err := q.db.ExecContext(ctx, createProfilesWithDefaultValues, accountID)
	return err
}

const deleteProfiles = `-- name: DeleteProfiles :exec
DELETE FROM profiles
WHERE account_id = $1
`

func (q *Queries) DeleteProfiles(ctx context.Context, accountID string) error {
	_, err := q.db.ExecContext(ctx, deleteProfiles, accountID)
	return err
}

const getProfilesByAccountID = `-- name: GetProfilesByAccountID :one
SELECT account_id, bio, profile_image_url, banner_image_url, created_at, updated_at FROM profiles
WHERE account_id = $1
`

func (q *Queries) GetProfilesByAccountID(ctx context.Context, accountID string) (Profile, error) {
	row := q.db.QueryRowContext(ctx, getProfilesByAccountID, accountID)
	var i Profile
	err := row.Scan(
		&i.AccountID,
		&i.Bio,
		&i.ProfileImageUrl,
		&i.BannerImageUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateProfiles = `-- name: UpdateProfiles :execresult
UPDATE profiles
SET bio = COALESCE($1, bio),
    profile_image_url = COALESCE($2, profile_image_url),
    banner_image_url = COALESCE($3, banner_image_url)
WHERE account_id = $4
`

type UpdateProfilesParams struct {
	Bio             sql.NullString
	ProfileImageUrl sql.NullString
	BannerImageUrl  sql.NullString
	AccountID       string
}

func (q *Queries) UpdateProfiles(ctx context.Context, arg UpdateProfilesParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateProfiles,
		arg.Bio,
		arg.ProfileImageUrl,
		arg.BannerImageUrl,
		arg.AccountID,
	)
}

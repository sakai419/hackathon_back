// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: follow_requests.sql

package sqlcgen

import (
	"context"
	"time"
)

const acceptFollowRequest = `-- name: AcceptFollowRequest :exec
INSERT INTO follows (follower_account_id, following_account_id)
SELECT requester_account_id, requested_account_id
FROM follow_requests
WHERE requester_account_id = ? AND requested_account_id = ?
`

type AcceptFollowRequestParams struct {
	RequesterAccountID string
	RequestedAccountID string
}

func (q *Queries) AcceptFollowRequest(ctx context.Context, arg AcceptFollowRequestParams) error {
	_, err := q.db.ExecContext(ctx, acceptFollowRequest, arg.RequesterAccountID, arg.RequestedAccountID)
	return err
}

const createFollowRequest = `-- name: CreateFollowRequest :exec
INSERT INTO follow_requests (requester_account_id, requested_account_id)
VALUES (?, ?)
`

type CreateFollowRequestParams struct {
	RequesterAccountID string
	RequestedAccountID string
}

func (q *Queries) CreateFollowRequest(ctx context.Context, arg CreateFollowRequestParams) error {
	_, err := q.db.ExecContext(ctx, createFollowRequest, arg.RequesterAccountID, arg.RequestedAccountID)
	return err
}

const deleteFollowRequest = `-- name: DeleteFollowRequest :exec
DELETE FROM follow_requests
WHERE requester_account_id = ? AND requested_account_id = ?
`

type DeleteFollowRequestParams struct {
	RequesterAccountID string
	RequestedAccountID string
}

func (q *Queries) DeleteFollowRequest(ctx context.Context, arg DeleteFollowRequestParams) error {
	_, err := q.db.ExecContext(ctx, deleteFollowRequest, arg.RequesterAccountID, arg.RequestedAccountID)
	return err
}

const deleteOldFollowRequests = `-- name: DeleteOldFollowRequests :exec
DELETE FROM follow_requests
WHERE created_at < ? AND requested_account_id = ?
`

type DeleteOldFollowRequestsParams struct {
	CreatedAt          time.Time
	RequestedAccountID string
}

func (q *Queries) DeleteOldFollowRequests(ctx context.Context, arg DeleteOldFollowRequestsParams) error {
	_, err := q.db.ExecContext(ctx, deleteOldFollowRequests, arg.CreatedAt, arg.RequestedAccountID)
	return err
}

const getPendingFollowRequestCount = `-- name: GetPendingFollowRequestCount :one
SELECT COUNT(*) FROM follow_requests
WHERE requested_account_id = ?
`

func (q *Queries) GetPendingFollowRequestCount(ctx context.Context, requestedAccountID string) (int64, error) {
	row := q.db.QueryRowContext(ctx, getPendingFollowRequestCount, requestedAccountID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getPendingFollowRequests = `-- name: GetPendingFollowRequests :many
SELECT requester_account_id
FROM follow_requests
WHERE requested_account_id = ?
ORDER BY created_at DESC
LIMIT ? OFFSET ?
`

type GetPendingFollowRequestsParams struct {
	RequestedAccountID string
	Limit              int32
	Offset             int32
}

func (q *Queries) GetPendingFollowRequests(ctx context.Context, arg GetPendingFollowRequestsParams) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getPendingFollowRequests, arg.RequestedAccountID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var requester_account_id string
		if err := rows.Scan(&requester_account_id); err != nil {
			return nil, err
		}
		items = append(items, requester_account_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSentFollowRequestCount = `-- name: GetSentFollowRequestCount :one
SELECT COUNT(*) FROM follow_requests
WHERE requester_account_id = ?
`

func (q *Queries) GetSentFollowRequestCount(ctx context.Context, requesterAccountID string) (int64, error) {
	row := q.db.QueryRowContext(ctx, getSentFollowRequestCount, requesterAccountID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getSentFollowRequests = `-- name: GetSentFollowRequests :many
SELECT requested_account_id
FROM follow_requests
WHERE requester_account_id = ?
ORDER BY created_at DESC
LIMIT ? OFFSET ?
`

type GetSentFollowRequestsParams struct {
	RequesterAccountID string
	Limit              int32
	Offset             int32
}

func (q *Queries) GetSentFollowRequests(ctx context.Context, arg GetSentFollowRequestsParams) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getSentFollowRequests, arg.RequesterAccountID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var requested_account_id string
		if err := rows.Scan(&requested_account_id); err != nil {
			return nil, err
		}
		items = append(items, requested_account_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const rejectFollowRequest = `-- name: RejectFollowRequest :exec
DELETE FROM follow_requests
WHERE requester_account_id = ? AND requested_account_id = ?
`

type RejectFollowRequestParams struct {
	RequesterAccountID string
	RequestedAccountID string
}

func (q *Queries) RejectFollowRequest(ctx context.Context, arg RejectFollowRequestParams) error {
	_, err := q.db.ExecContext(ctx, rejectFollowRequest, arg.RequesterAccountID, arg.RequestedAccountID)
	return err
}

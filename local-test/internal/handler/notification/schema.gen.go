// Package notification provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package notification

import (
	"fmt"
	"net/http"
	"time"

	"github.com/gorilla/mux"
	"github.com/oapi-codegen/runtime"
)

// Count defines model for Count.
type Count struct {
	Count int64 `json:"count"`
}

// Media defines model for Media.
type Media struct {
	Type string `json:"type"`
	Url  string `json:"url"`
}

// Notification defines model for Notification.
type Notification struct {
	Content      *string    `json:"content,omitempty"`
	CreatedAt    time.Time  `json:"created_at"`
	Id           int64      `json:"id"`
	IsRead       bool       `json:"is_read"`
	RelatedTweet *TweetInfo `json:"related_tweet,omitempty"`
	SenderInfo   *UserInfo  `json:"sender_info,omitempty"`
	Type         string     `json:"type"`
}

// Notifications defines model for Notifications.
type Notifications = []Notification

// TweetInfo defines model for TweetInfo.
type TweetInfo struct {
	Code          *string            `json:"Code"`
	Content       *string            `json:"Content"`
	CreatedAt     time.Time          `json:"CreatedAt"`
	HasLiked      bool               `json:"HasLiked"`
	HasRetweeted  bool               `json:"HasRetweeted"`
	IsPinned      bool               `json:"IsPinned"`
	IsQuote       bool               `json:"IsQuote"`
	IsReply       bool               `json:"IsReply"`
	LikesCount    int32              `json:"LikesCount"`
	Media         *Media             `json:"Media,omitempty"`
	RepliesCount  int32              `json:"RepliesCount"`
	RetweetsCount int32              `json:"RetweetsCount"`
	TweetID       int64              `json:"TweetID"`
	UserInfo      UserInfoWithoutBio `json:"UserInfo"`
}

// UserInfo defines model for UserInfo.
type UserInfo struct {
	Bio             string `json:"bio"`
	ProfileImageUrl string `json:"profile_image_url"`
	UserId          string `json:"user_id"`
	UserName        string `json:"user_name"`
}

// UserInfoWithoutBio defines model for UserInfoWithoutBio.
type UserInfoWithoutBio struct {
	// ProfileImageUrl URL of the user's profile image.
	ProfileImageUrl string `json:"profile_image_url"`

	// UserId The ID of the user.
	UserId string `json:"user_id"`

	// UserName The name of the user.
	UserName string `json:"user_name"`
}

// GetNotificationsParams defines parameters for GetNotifications.
type GetNotificationsParams struct {
	Limit  int32 `form:"limit" json:"limit"`
	Offset int32 `form:"offset" json:"offset"`
}

// GetUnreadNotificationsParams defines parameters for GetUnreadNotifications.
type GetUnreadNotificationsParams struct {
	Limit  int32 `form:"limit" json:"limit"`
	Offset int32 `form:"offset" json:"offset"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get notifications
	// (GET /notifications)
	GetNotifications(w http.ResponseWriter, r *http.Request, params GetNotificationsParams)
	// Mark all notifications as read
	// (PATCH /notifications/read/all)
	MarkAllNotificationsAsRead(w http.ResponseWriter, r *http.Request)
	// Get unread notifications
	// (GET /notifications/unread)
	GetUnreadNotifications(w http.ResponseWriter, r *http.Request, params GetUnreadNotificationsParams)
	// Get unread notifications count
	// (GET /notifications/unread/count)
	GetUnreadNotificationsCount(w http.ResponseWriter, r *http.Request)
	// Mark a notification as read
	// (PATCH /notifications/{notification_id}/read)
	MarkNotificationAsRead(w http.ResponseWriter, r *http.Request, notificationId int64)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetNotifications operation middleware
func (siw *ServerInterfaceWrapper) GetNotifications(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNotificationsParams

	// ------------- Required query parameter "limit" -------------

	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "limit"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Required query parameter "offset" -------------

	if paramValue := r.URL.Query().Get("offset"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "offset"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetNotifications(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// MarkAllNotificationsAsRead operation middleware
func (siw *ServerInterfaceWrapper) MarkAllNotificationsAsRead(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.MarkAllNotificationsAsRead(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetUnreadNotifications operation middleware
func (siw *ServerInterfaceWrapper) GetUnreadNotifications(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUnreadNotificationsParams

	// ------------- Required query parameter "limit" -------------

	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "limit"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Required query parameter "offset" -------------

	if paramValue := r.URL.Query().Get("offset"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "offset"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUnreadNotifications(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetUnreadNotificationsCount operation middleware
func (siw *ServerInterfaceWrapper) GetUnreadNotificationsCount(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUnreadNotificationsCount(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// MarkNotificationAsRead operation middleware
func (siw *ServerInterfaceWrapper) MarkNotificationAsRead(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "notification_id" -------------
	var notificationId int64

	err = runtime.BindStyledParameterWithOptions("simple", "notification_id", mux.Vars(r)["notification_id"], &notificationId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "notification_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.MarkNotificationAsRead(w, r, notificationId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{})
}

type GorillaServerOptions struct {
	BaseURL          string
	BaseRouter       *mux.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r *mux.Router) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r *mux.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options GorillaServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = mux.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.HandleFunc(options.BaseURL+"/notifications", wrapper.GetNotifications).Methods("GET")

	r.HandleFunc(options.BaseURL+"/notifications/read/all", wrapper.MarkAllNotificationsAsRead).Methods("PATCH")

	r.HandleFunc(options.BaseURL+"/notifications/unread", wrapper.GetUnreadNotifications).Methods("GET")

	r.HandleFunc(options.BaseURL+"/notifications/unread/count", wrapper.GetUnreadNotificationsCount).Methods("GET")

	r.HandleFunc(options.BaseURL+"/notifications/{notification_id}/read", wrapper.MarkNotificationAsRead).Methods("PATCH")

	return r
}
